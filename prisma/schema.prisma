// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  username      String?    @unique
  name          String
  password      String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  patients      Patient[]
  Schedule      Schedule[]
}

enum ScheduleStatus {
  PENDING
  COMPLETED
  CANCELED
}

model Schedule {
  id        String          @id @default(uuid())
  name      String
  lastName  String
  date      DateTime
  value     Int             @default(0)
  status    ScheduleStatus
  userId    String
  patientId String
  createdAt DateTime        @default(now())
  User      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  patient   Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Patient {
  id          String     @id @default(uuid())
  name        String
  lastName    String
  convenio    String
  userId      String
  lastConsult DateTime?
  createdAt   DateTime   @default(now())
  author      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Schedule    Schedule[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
