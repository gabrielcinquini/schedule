// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  username      String?    @unique
  name          String
  password      String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Account       Account?
  patients      Patient[]
  Schedule      Schedule[]
}

enum ScheduleStatus {
  PENDING
  COMPLETED
  CANCELED
}

model Schedule {
  id        String          @id @default(uuid())
  name      String
  date      DateTime
  value     Int             @default(0)
  status    ScheduleStatus
  userId    String
  patientId String
  createdAt DateTime        @default(now())
  User      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  patient   Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Patient {
  id                  String      @id @default(uuid())
  name                String
  cpf                 String
  convenio            String
  userId              String
  lastConsult         DateTime?
  createdAt           DateTime    @default(now())
  author              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Schedule            Schedule[]
  CPF_Consent_version String
  CPF_Consent         CpfConsent  @relation(fields: [CPF_Consent_version], references: [version])
}

model CpfConsent {
  id              String   @id @default(uuid())
  version         String   @unique
  consent_title   String
  consent_text    String   @db.Text
  isActive        Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  patient         Patient[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
