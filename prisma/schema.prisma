generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model User {
  id            String     @id @default(uuid())
  username      String?    @unique
  name          String
  password      String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Account       Account?
  patients      Patient[]
  Schedule      Schedule[]

  Register_Consent_version String?
  Register_Consent         RegisterConsent? @relation(fields: [Register_Consent_version], references: [version])
}

model Schedule {
  id        String         @id @default(uuid())
  date      DateTime
  value     Int            @default(0)
  status    ScheduleStatus
  userId    String
  patientId String
  createdAt DateTime       @default(now())
  patient   Patient        @relation(fields: [patientId], references: [id], onDelete: Cascade, map: "fk_patient")
  User      User           @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_user")

  @@index([patientId], map: "Schedule_patientId_fkey")
  @@index([userId], map: "Schedule_userId_fkey")
}

model Patient {
  id                  String      @id @default(uuid())
  name                String
  cpf                 String?
  phone               String?
  convenio            String
  userId              String
  lastConsult         DateTime?
  createdAt           DateTime    @default(now())
  CPF_Consent_version String?
  CPF_Consent         CpfConsent? @relation(fields: [CPF_Consent_version], references: [version], map: "fk_cpf_consent")
  author              User        @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_author")
  Schedule            Schedule[]

  @@index([CPF_Consent_version], map: "Patient_CPF_Consent_version_fkey")
  @@index([userId], map: "Patient_userId_fkey")
}

model RegisterConsent {
  id            String   @id @default(uuid())
  version       String   @unique
  consent_title String
  consent_text  String   @db.Text
  isActive      Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User[]
}

model CpfConsent {
  id            String    @id @default(uuid())
  version       String    @unique
  consent_title String
  consent_text  String    @db.Text
  isActive      Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  patient       Patient[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum ScheduleStatus {
  PENDING
  COMPLETED
  CANCELED
}
